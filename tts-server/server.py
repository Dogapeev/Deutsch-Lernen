# –§–∞–π–ª: tts-server/server.py
# –í–ï–†–°–ò–Ø 1.4.4: –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ '429' —Å –ø–æ–º–æ—â—å—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–æ–≤ (threading.Lock)

import os
import json
import hashlib
import asyncio
import time
from pathlib import Path
from typing import Dict, List, Set
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from gtts import gTTS
import logging
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import threading # <-- 1. –ò–ú–ü–û–†–¢–ò–†–£–ï–ú threading
from datetime import datetime
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import signal
import sys
import atexit

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
app = Flask(__name__)
CORS(app)
limiter = Limiter(get_remote_address, app=app, default_limits=["200 per day", "50 per hour"])

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
PRODUCTION = os.getenv('PRODUCTION', 'false').lower() == 'true'
AUDIO_DIR = "audio_cache"
VOCABULARIES_DIR = "vocabularies"
CACHE_MANIFEST = "cache_manifest.json"
CONFIG_FILE = "auto_config.json"
ACCESS_STATS_FILE = "access_stats.json"
SUPPORTED_LANGUAGES = {'de', 'ru', 'en', 'fr', 'es'}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = logging.WARNING if PRODUCTION else logging.INFO
logging.basicConfig(level=log_level, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AutoVocabularySystem:
    def __init__(self):
        self.audio_dir = Path(AUDIO_DIR)
        self.vocabularies_dir = Path(VOCABULARIES_DIR)
        self.config = self.load_config()
        self.protected_hashes = set()
        self.vocabulary_registry = {}
        self.file_observer = None
        self.processing_queue = asyncio.Queue()
        self.last_cleanup_time = time.time()
        
        # --- 2. –ó–ê–ú–ï–ù–Ø–ï–ú asyncio.Semaphore –ù–ê threading.Lock ---
        # –≠—Ç–æ—Ç –∑–∞–º–æ–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ event loop.
        self.gtts_lock = threading.Lock()
        
        self._initialized = False

        os.makedirs(AUDIO_DIR, exist_ok=True)
        os.makedirs(VOCABULARIES_DIR, exist_ok=True)
        self.load_manifest()
        
        try:
            self.loop = asyncio.get_event_loop()
        except RuntimeError:
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
        
        self.background_thread = threading.Thread(target=self.run_background_processor, daemon=True)

    def ensure_initialized(self):
        if self._initialized: return
        logger.info("üöÄ –í—ã–ø–æ–ª–Ω—è—é –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
        self.scan_vocabularies(auto_process=True)
        if self.config.get('auto_watch_enabled', True): self.start_file_watcher()
        self._initialized = True
        logger.info("‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def load_config(self):
        default_config = {
            "auto_watch_enabled": True, "auto_process_on_change": True,
            "auto_process_on_startup": True, "retry_failed": True,
            "cleanup_on_startup": False, "auto_cleanup_enabled": True,
            "cleanup_interval_hours": 24, "min_access_count_protect": 2,
            "max_cache_files": 1000, "max_cache_size_mb": 500,
            "check_interval_seconds": 300, "supported_extensions": [".json"],
            "exclude_patterns": [".*", "~*", "*~", "*.bak", "*.tmp"]
        }
        try:
            if os.path.exists(CONFIG_FILE):
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    default_config.update(loaded_config)
                logger.info("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                    json.dump(default_config, f, indent=2, ensure_ascii=False)
                logger.info("üîß –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", exc_info=not PRODUCTION)
        return default_config

    def load_manifest(self):
        try:
            if os.path.exists(CACHE_MANIFEST):
                with open(CACHE_MANIFEST, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.protected_hashes = set(data.get('protected_hashes', []))
                    self.vocabulary_registry = data.get('vocabularies', {})
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}", exc_info=not PRODUCTION)

    def save_manifest(self):
        try:
            data = {'protected_hashes': list(self.protected_hashes), 'vocabularies': self.vocabulary_registry, 'last_updated': datetime.now().isoformat()}
            with open(CACHE_MANIFEST, 'w', encoding='utf-8') as f: json.dump(data, f, indent=2, ensure_ascii=False)
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}", exc_info=not PRODUCTION)

    def scan_vocabularies(self, auto_process=None):
        logger.info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π...")
        if auto_process is None: auto_process = self.config.get('auto_process_on_startup', True)
        if not self.vocabularies_dir.exists():
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.vocabularies_dir}"); return []
            
        vocab_files = [p for ext in self.config['supported_extensions'] for p in self.vocabularies_dir.glob(f"*{ext}")]
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(vocab_files)}")
        new_or_changed = []
        
        for vocab_file in vocab_files:
            if any(vocab_file.match(p) for p in self.config['exclude_patterns']):
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –ø–æ –ø—Ä–∞–≤–∏–ª—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {vocab_file.name}"); continue
            try:
                current_mtime = vocab_file.stat().st_mtime
                vocab_name = vocab_file.stem
                if (vocab_name not in self.vocabulary_registry or self.vocabulary_registry[vocab_name].get('last_modified', 0) < current_mtime):
                    with open(vocab_file, 'r', encoding='utf-8') as f: vocab_data = json.load(f)
                    if isinstance(vocab_data, dict) and 'words' in vocab_data: word_count = len(vocab_data['words'])
                    elif isinstance(vocab_data, list): word_count = len(vocab_data)
                    else: logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è: {vocab_file.name}"); continue
                    self.vocabulary_registry[vocab_name] = {'file_path': str(vocab_file), 'word_count': word_count, 'last_modified': current_mtime, 'status': 'detected'}
                    new_or_changed.append(vocab_name)
                    logger.info(f"‚úÖ –°–ª–æ–≤–∞—Ä—å {vocab_name} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω ({word_count} —Å–ª–æ–≤)")
            except Exception as e: logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è {vocab_file.name}: {e}", exc_info=not PRODUCTION)
        
        if new_or_changed:
            self.save_manifest()
            if auto_process:
                if not self.background_thread.is_alive(): self.background_thread.start()
                for vocab_name in new_or_changed:
                    asyncio.run_coroutine_threadsafe(self.add_to_processing_queue(vocab_name), self.loop)
                logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {new_or_changed}")
        return new_or_changed

    async def add_to_processing_queue(self, vocab_name):
        await self.processing_queue.put({'action': 'pregenerate', 'vocab_name': vocab_name})

    def run_background_processor(self):
        asyncio.set_event_loop(self.loop)
        self.loop.run_until_complete(self.background_processor())

    async def background_processor(self):
        logger.info("üîÑ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω")
        while True:
            try:
                task = await self.processing_queue.get()
                if isinstance(task, asyncio.CancelledError): break
                if task.get('action') == 'pregenerate':
                    vocab_name = task['vocab_name']
                    logger.info(f"üéµ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è: {vocab_name}")
                    result = await self.pregenerate_vocabulary_audio(vocab_name)
                    logger.info(f"‚úÖ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {vocab_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
                    self.vocabulary_registry.setdefault(vocab_name, {})['status'] = 'ready'
                    self.save_manifest()
                self.processing_queue.task_done()
            except asyncio.CancelledError: logger.info("–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è."); break
            except Exception as e: logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {e}", exc_info=not PRODUCTION); await asyncio.sleep(10)

    def start_file_watcher(self):
        if self.file_observer and self.file_observer.is_alive(): return
        class VocabularyFileHandler(FileSystemEventHandler):
            def __init__(self, system_ref): self.system = system_ref; self.timer = None
            def on_any_event(self, event):
                if not event.is_directory and any(event.src_path.endswith(ext) for ext in self.system.config['supported_extensions']):
                    if self.timer: self.timer.cancel()
                    self.timer = threading.Timer(2.0, self.system.scan_vocabularies, args=[True]); self.timer.start()
        self.file_observer = Observer()
        self.file_observer.schedule(VocabularyFileHandler(self), str(self.vocabularies_dir), recursive=True)
        self.file_observer.start(); logger.info(f"üëÅÔ∏è –ó–∞–ø—É—â–µ–Ω–æ —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ø–∞–ø–∫–æ–π: {self.vocabularies_dir}")
        
    def stop_file_watcher(self):
        if self.file_observer and self.file_observer.is_alive(): 
            self.file_observer.stop(); self.file_observer.join(); logger.info("üëÅÔ∏è –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ —Ñ–∞–π–ª–∞–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def pregenerate_vocabulary_audio(self, vocab_name: str):
        if vocab_name not in self.vocabulary_registry: raise ValueError(f"–°–ª–æ–≤–∞—Ä—å {vocab_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        with open(self.vocabulary_registry[vocab_name]['file_path'], 'r', encoding='utf-8') as f: vocab_data = json.load(f)
        words_list = vocab_data.get('words', vocab_data)
        hash_to_text_map = {self._get_text_hash(lang, entry.get(field)): (lang, entry.get(field))
                            for entry in words_list for field, lang in [('german', 'de'), ('russian', 'ru'), ('sentence', 'de'), ('sentence_ru', 'ru')] if entry.get(field)}
        missing_hashes = {h for h in hash_to_text_map if not (self.audio_dir / f"{h}.mp3").exists()}
        if not missing_hashes: return {'status': 'all_files_exist', 'count': len(hash_to_text_map)}
        logger.info(f"üéµ {vocab_name}: —Ç—Ä–µ–±—É–µ—Ç—Å—è {len(missing_hashes)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
        tasks = [self._generate_audio_file(h, *hash_to_text_map[h]) for h in missing_hashes]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        success_count = sum(1 for r in results if r is not None and not isinstance(r, Exception))
        return {'generated': success_count, 'failed': len(results) - success_count}

    def _get_text_hash(self, lang: str, text: str) -> str:
        return hashlib.md5(f"{lang}:{text}".encode('utf-8')).hexdigest()

    async def _generate_audio_file(self, hash_value: str, lang: str, text: str):
        filepath = self.audio_dir / f"{hash_value}.mp3"
        if filepath.exists(): return hash_value
        for attempt in range(3):
            try:
                await asyncio.get_event_loop().run_in_executor(None, self._blocking_gtts_save, text, lang, str(filepath))
                logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {filepath.name}")
                return hash_value
            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {filepath.name} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: {e}")
                if attempt < 2: await asyncio.sleep(2 ** attempt)
                else: raise

    # --- 3. –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –¢–ï–ü–ï–†–¨ –ó–ê–©–ò–©–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–û–ô ---
    def _blocking_gtts_save(self, text, lang, path):
        # –≠—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ (–∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞) –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ—Ç –∫–æ–¥
        with self.gtts_lock:
            tts = gTTS(text=text, lang=lang, slow=False)
            tts.save(path)

    # --- 4. –°–û–ó–î–ê–ï–ú –°–ò–ù–•–†–û–ù–ù–£–Æ –í–ï–†–°–ò–Æ –ì–ï–ù–ï–†–ê–¢–û–†–ê –î–õ–Ø FLASK ---
    def generate_audio_sync(self, hash_value: str, lang: str, text: str):
        filepath = self.audio_dir / f"{hash_value}.mp3"
        if filepath.exists(): return
        for attempt in range(3):
            try:
                self._blocking_gtts_save(text, lang, str(filepath))
                logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {filepath.name}")
                return
            except Exception as e:
                logger.warning(f"–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {filepath.name} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: {e}")
                if attempt < 2: time.sleep(2 ** attempt)
                else: raise

auto_system = AutoVocabularySystem()

@app.route('/synthesize', methods=['GET'])
@limiter.limit("30 per minute")
def synthesize_speech():
    auto_system.ensure_initialized()
    text, lang = request.args.get('text', '').strip(), request.args.get('lang', '').lower()
    if not (1 < len(text) <= 500 and lang in SUPPORTED_LANGUAGES): return jsonify({"error": "Invalid input"}), 400
    
    hash_val = auto_system._get_text_hash(lang, text)
    filename = f"{hash_val}.mp3"
    filepath = auto_system.audio_dir / filename
    
    if not filepath.exists():
        try:
            # --- 5. –í–´–ó–´–í–ê–ï–ú –°–ò–ù–•–†–û–ù–ù–£–Æ –í–ï–†–°–ò–Æ ---
            auto_system.generate_audio_sync(hash_val, lang, text)
            logger.info(f"üé§ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {filename}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=not PRODUCTION)
            return jsonify({"error": "Failed to generate audio"}), 500
            
    return jsonify({"url": f"/audio/{filename}"})

@app.route('/audio/<filename>')
def serve_audio(filename):
    return send_from_directory(str(auto_system.audio_dir), filename)

@app.route('/api/vocabularies/list')
def get_vocabularies_list():
    auto_system.ensure_initialized()
    return jsonify([{"name": name, "word_count": data.get('word_count', 0)} for name, data in auto_system.vocabulary_registry.items()])

@app.route('/api/vocabulary/<vocab_name>')
def get_vocabulary(vocab_name):
    auto_system.ensure_initialized()
    if vocab_name not in auto_system.vocabulary_registry: return jsonify({"error": "Not found"}), 404
    return send_from_directory(str(auto_system.vocabularies_dir), f"{vocab_name}.json")

@app.route('/status')
def system_status():
    return jsonify({"version": "1.4.4-threading-lock-fix", "initialized": auto_system._initialized})

def graceful_shutdown():
    logger.info("üõë –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    auto_system.stop_file_watcher()
    if auto_system.background_thread.is_alive():
        if not auto_system.loop.is_closed():
            asyncio.run_coroutine_threadsafe(auto_system.processing_queue.put(asyncio.CancelledError()), auto_system.loop)
        auto_system.background_thread.join(timeout=3)
    logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

atexit.register(graceful_shutdown)
signal.signal(signal.SIGINT, lambda s, f: sys.exit(0))
signal.signal(signal.SIGTERM, lambda s, f: sys.exit(0))

if __name__ == '__main__':
    logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ TTS –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    auto_system.ensure_initialized()
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)